{"version":3,"sources":["reportWebVitals.ts","StoryMaker/StoryMaker.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","gauntletData","creatures","gauntlets","concat","deity","planes","tribes","StoryMaker","useState","rarity","setRarity","element","setElement","attack","setAttack","makeName","name","start","namingData","filter","_rarity","middle","_element","content","end","_attack","charAt","toUpperCase","slice","getFirstLetter","word","makeID","makeStoryCell","storyData","className","htmlFor","id","onChange","e","target","value","options","hidden","forEach","push","getRarities","getAttacks","getElements","rows","map","gauntlet","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e1850c7.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\r\nimport storyData from \"./StoryData.json\";\r\nimport namingData from \"./NamingData.json\";\r\nimport creatures from \"./GauntletData/Creatures.json\";\r\nimport deity from \"./GauntletData/Creatures.json\";\r\nimport planes from \"./GauntletData/Creatures.json\";\r\nimport tribes from \"./GauntletData/Creatures.json\";\r\n\r\nconst gauntletData = creatures.gauntlets.concat(\r\n  deity.gauntlets,\r\n  planes.gauntlets,\r\n  tribes.gauntlets\r\n);\r\n\r\nconst StoryMaker = () => {\r\n  const [rarity, setRarity] = useState<string>(\"no rarity\");\r\n  const [element, setElement] = useState<string>(\"no element\");\r\n  const [attack, setAttack] = useState<string>(\"no attack\");\r\n\r\n  const getRarities = () => {\r\n    const options: JSX.Element[] = [<option hidden>select</option>];\r\n    storyData.rarity.forEach((rarity) => {\r\n      options.push(<option value={rarity.content}>{rarity.name}</option>);\r\n    });\r\n    return options;\r\n  };\r\n\r\n  const getElements = () => {\r\n    const options: JSX.Element[] = [<option hidden>select</option>];\r\n    storyData.element.forEach((element) => {\r\n      options.push(<option value={element.content}>{element.name}</option>);\r\n    });\r\n    return options;\r\n  };\r\n\r\n  const getAttacks = () => {\r\n    const options: JSX.Element[] = [<option hidden>select</option>];\r\n    storyData.attack.forEach((attack) => {\r\n      options.push(<option value={attack.content}>{attack.name}</option>);\r\n    });\r\n    return options;\r\n  };\r\n\r\n  const makeStory = () => {\r\n    return `${rarity} ${attack} ${element}`;\r\n  };\r\n\r\n  const capitalizeFirstLetter = (name: string) => {\r\n    return name.charAt(0).toUpperCase() + name.slice(1);\r\n  };\r\n\r\n  const makeName = (rarity: string, element: string, attack: string) => {\r\n    const start = namingData.rarity.filter(\r\n      (_rarity) => _rarity.name === rarity\r\n    )[0].name;\r\n    const middle = namingData.element.filter(\r\n      (_element) => _element.name === element\r\n    )[0].content;\r\n    const end = namingData.attack.filter(\r\n      (_attack) => _attack.name === attack\r\n    )[0].content;\r\n\r\n    return `${capitalizeFirstLetter(start)}'s ${middle} ${end}`;\r\n  };\r\n\r\n  const getFirstLetter = (word: string) => {\r\n    return word.charAt(0).toUpperCase() + word.charAt(1);\r\n  };\r\n\r\n  const makeID = (rarity: string, element: string, attack: string) => {\r\n    const start = namingData.rarity.filter(\r\n      (_rarity) => _rarity.name === rarity\r\n    )[0].name;\r\n    const middle = namingData.element.filter(\r\n      (_element) => _element.name === element\r\n    )[0].content;\r\n    const end = namingData.attack.filter(\r\n      (_attack) => _attack.name === attack\r\n    )[0].content;\r\n\r\n    return `${getFirstLetter(start)}_${getFirstLetter(middle)}_${getFirstLetter(\r\n      end\r\n    )}`;\r\n  };\r\n\r\n  const makeStoryCell = (rarity: string, element: string, attack: string) => {\r\n    const start = storyData.rarity.filter(\r\n      (_rarity) => _rarity.name === rarity\r\n    )[0].content;\r\n    const middle = storyData.attack.filter(\r\n      (_attack) => _attack.name === attack\r\n    )[0].content;\r\n    const end = storyData.element.filter(\r\n      (_element) => _element.name === element\r\n    )[0].content;\r\n\r\n    return `${start} ${middle} ${end}`;\r\n  };\r\n\r\n  const makeRows = () => {\r\n    return gauntletData.map((gauntlet, index) => {\r\n      return (\r\n        <tr>\r\n          <td>{index + 1}</td>\r\n          <td>\r\n            {makeName(gauntlet.rarity, gauntlet.element, gauntlet.attack)}\r\n          </td>\r\n          <td>{gauntlet.rarity}</td>\r\n          <td>{gauntlet.element}</td>\r\n          <td>{gauntlet.attack}</td>\r\n          <td>\r\n            {makeStoryCell(gauntlet.rarity, gauntlet.element, gauntlet.attack)}\r\n          </td>\r\n          <td>{makeID(gauntlet.rarity, gauntlet.element, gauntlet.attack)}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"top\">\r\n        <div>\r\n          <label htmlFor=\"rarity\">Rarity</label>\r\n          <select\r\n            name=\"\"\r\n            id=\"rarity\"\r\n            onChange={(e) => setRarity(e.target.value)}\r\n          >\r\n            {getRarities()}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"attack\">Attack</label>\r\n          <select\r\n            name=\"\"\r\n            id=\"attack\"\r\n            onChange={(e) => setAttack(e.target.value)}\r\n          >\r\n            {getAttacks()}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"element\">Element</label>\r\n          <select\r\n            name=\"\"\r\n            id=\"element\"\r\n            onChange={(e) => setElement(e.target.value)}\r\n          >\r\n            {getElements()}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <label htmlFor=\"result\">Result</label>\r\n        <textarea value={makeStory()} rows={5} />\r\n      </div>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Name</th>\r\n            <th>Rarity</th>\r\n            <th>Element</th>\r\n            <th>Attack</th>\r\n            <th>Story</th>\r\n            <th>ID</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{makeRows()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StoryMaker;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport StoryMaker from \"./StoryMaker/StoryMaker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoryMaker />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}